{"version":3,"sources":["../src/cache.js"],"names":[],"mappings":"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","file":"cache.js","sourcesContent":["'use strict';\n\nimport NodeCache from 'node-cache';\n\nexport default function(RED) {\n  class CacheNode {\n    constructor(n) {\n      RED.nodes.createNode(this, n);\n      this.name = n.name;\n      this.cache = new NodeCache({\n        stdTTL : n.defaultTtl || 0,\n        checkperiod : n.checkPeriod || 0\n      });\n      this.cache.nodeList = [];\n      function addNode(node) {\n        this.nodeList.push(node);\n      }\n      this.cache.addNode = addNode.bind(this.cache);\n      function onChanged() {\n        this.nodeList.forEach((n) => {\n          n.emit('updated');\n        });\n      }\n      this.cache.onChanged = onChanged.bind(this.cache);\n      ['set', 'del', 'expired', 'flush'].forEach((e) => {\n        this.cache.on(e, this.cache.onChanged);\n      });\n      this.on('close', () => {\n        this.cache.close();\n        delete this.cache;\n      });\n    }\n  }\n  RED.nodes.registerType('Cache', CacheNode);\n\n  class CacheInNode {\n    constructor(n) {\n      RED.nodes.createNode(this, n);\n      this.keyProperty = n.keyProperty || 'topic';\n      this.valueProperty = n.valueProperty || 'payload';\n      this.useString = n.useString;\n      this.cacheMissRouting = n.outputs > 1;\n      this.cacheNodeId = n.cache;\n      this.cacheNode = RED.nodes.getNode(this.cacheNodeId);\n      if (this.cacheNode) {\n        this.cacheNode.cache.addNode(this);\n        this.on('updated', () => { this.status({fill:'green',shape:'dot',text:RED._('cache.status.keys', {n:this.cacheNode.cache.getStats().keys})}); });\n      }\n      this.name = n.name;\n      let sendMessage = (msg, cacheMiss) => {\n        if (this.cacheMissRouting) {\n          let ports = [];\n          ports[cacheMiss ? 1 : 0] = msg;\n          this.send(ports);\n        } else {\n          this.send(msg);\n        }\n      };\n      this.on('input', (msg) => {\n        if (this.cacheNode) {\n          if (msg.dump || msg.payload && msg.payload.dump) {\n            this.cacheNode.cache.keys((err, keys) => {\n              if (!err) {\n                this.cacheNode.cache.mget(keys, (err, value) => {\n                  RED.util.setMessageProperty(msg, this.valueProperty, value);\n                  sendMessage(msg);\n                });\n              }\n            });\n          } else {\n            let key = RED.util.getMessageProperty(msg, this.keyProperty);\n            if (key) {\n              this.cacheNode.cache.get(key, (err, value) => {\n                if (!err) {\n                  let cacheMiss = (value === undefined);\n                  RED.util.setMessageProperty(msg, this.valueProperty, ((value === '' || cacheMiss) ? null : value));\n                  sendMessage(msg, cacheMiss);\n                }\n              });\n            }\n          }\n        }\n      });\n      process.nextTick(() => {\n        this.emit('updated');\n      });\n    }\n  }\n  RED.nodes.registerType('Cache in', CacheInNode);\n\n  class CacheOutNode {\n    constructor(n) {\n      RED.nodes.createNode(this, n);\n      this.keyProperty = n.keyProperty || 'topic';\n      this.valueProperty = n.valueProperty || 'payload';\n      this.ttlProperty = n.ttlProperty || '';\n      this.useString = n.useString;\n      this.cacheNodeId = n.cache;\n      this.cacheNode = RED.nodes.getNode(this.cacheNodeId);\n      if (this.cacheNode) {\n        this.cacheNode.cache.addNode(this);\n        this.on('updated', () => { this.status({fill:'green',shape:'dot',text:RED._('cache.status.keys', {n:this.cacheNode.cache.getStats().keys})}); });\n      }\n      this.name = n.name;\n      this.on('input', (msg) => {\n        if (this.cacheNode) {\n          let key = RED.util.getMessageProperty(msg, this.keyProperty);\n          if (key) {\n            let value = RED.util.getMessageProperty(msg, this.valueProperty);\n            if (this.ttlProperty) {\n              let ttl = RED.util.getMessageProperty(msg, this.ttlProperty) || 0;\n              this.cacheNode.cache.set(key, value, ttl);\n            } else {\n              this.cacheNode.cache.set(key, value);\n            }\n          }\n        }\n      });\n      process.nextTick(() => {\n        this.emit('updated');\n      });\n    }\n  }\n  RED.nodes.registerType('Cache out', CacheOutNode);\n}\n"]}